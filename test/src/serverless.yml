service: sls-router-sample-simple

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 128
  timeout: 30
  stage: 'sample'
  region: us-east-1
  environment:
    STAGE: ${self:provider.stage}
    JWT_ISSUER: ${file(./test/src/.env.yml):${self:provider.stage}.JWT_ISSUER}
    JWT_SECRET: ${file(./test/src/.env.yml):${self:provider.stage}.JWT_SECRET}


functions:
  app:
    handler: test/src/server.handler
    events:
      - http:
          path: /
          method: ANY
          cors: true
      - http:
          path: /{proxy+}
          method: ANY
          cors: true

resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

plugins:
  - serverless-offline

custom:
  serverless-offline:
    host: 0.0.0.0
    httpPort: 8080
    noPrependStageInUrl : true